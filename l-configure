#!/bin/bash


InitDefaultValues() {
    declare -g    ConfigFile='ledgersmb.conf'
    declare -g    dojo_built='0'
    declare -g       tempdir='/tmp/ledgersmb'
    declare -g   cookie_name='LedgerSMB'
    declare -g    default_db='demo16'
    declare -g          port='0.0.0.0:5764'
    declare -g     otherOpts='--preload-app'
    declare -g       pidFile='/tmp/ledgersmb'
    declare -g       LogFile='/tmp/ledgersmb/ledgersmb'
        tempdir+="-$Version-${port##*:}"
    cookie_name+="-$Version-${port##*:}"
        pidFile+="-$Version-${port##*:}"
        LogFile+="-$Version-${port##*:}"

}

Init() {
    declare -g       RepoDir=`git rev-parse --show-toplevel`
    declare -g CurrentBranch=`git rev-parse --abbrev-ref HEAD`
    declare -g -i    COLUMNS=`tput cols`
    declare -g -i    NumCols; (( NumCols=(4* ((COLUMNS-5)/80) ) ))
    declare -g -i   ColWidth; (( ColWidth = (COLUMNS-5)/ NumCols ))
    declare -g       Version=`perl -Ilib -Iold/lib -MLedgerSMB -e 'print $LedgerSMB::VERSION'`
    InitDefaultValues
}

VersionIsNewerThan() {
    local current="$Version"
    local requested="$1"
    # Store a sorted list of both versions in $c
    local c=` echo -e "$current\n$requested" | sort`
    
    # Read the oldest version (first entry) out of $c and stor it in $V
    read -t1 V <<<"$c"
    #echo -n "V=$current  is "; if [[ "$V" == "$requested" ]]; then echo -n 'newer'; else echo -n 'older'; fi; echo -e " than $requested"
    # if $V matches the requested version then current version is newer or equal to what was requested
    [[ "$V" == "$requested" ]] && true || false; # returns true or false depending on test
}

write_config() {
    cat <<-EOF
	
	
	=======================================================
	=======================================================
	==                Writing Config File                ==
	==                                                   ==`echo $'\r'`==  ${RepoDir}/${ConfigFile}
	=======================================================
	=======================================================
	EOF

    cat <<-EOF
	[debug]
	dojo_built = $dojo_built
	
	[main]
	tempdir = $tempdir
	cookie_name = $cookie_name
	
	EOF

    if ! VersionIsNewerThan '1.5.4'; then #there was a bug in earlier versions that didn't set the DB defaults correctly
        cat <<-EOF
		[database]
		# Sets database connection parameters.  Note that default_db can be left blank
		# if you want to force people to enter a company name at login.
		port = 5432
		default_db = $default_db
		host = localhost
		db_namespace = public
		# sslmode can be require, allow, prefer, or disable.  Defaults to prefer.
		sslmode = prefer
		IgnoreDatabaseRegex = 'postgres|template0|template1';
		IgnoreDbSuperUserRegex = '';
		DefaultDbSuperUser = 'lsmb_dbadmin';
		
		EOF
    fi

    cat <<-EOF
	# This section is currently only used if starting LedgerSMB via a "$installdir/bin/ledgersmb-run"
	# If it's not included in this release
	# It is available from  https://github.com/sbts/LedgerSMB-dev-scripts as l-start-lsmb.sh if you want to try it.
	[starman]
	port = $port
	 #dir = /usr/share/ledgersmb
	verbose = true
	 #workers = 5
	 #max-requests = 1000
	# pidFile is just the basename the port number and extension will be automatically appended
	#   eg: /tmp/ledgersmb-$Version-${port##*:}.pid
	pidFile = $pidFile
	# logFile is just the basename the port number and extension will be automatically appended
	#   eg: $LogFile-5000.log
	 #LogFile = $LogFile
	otherOpts = '$otherOpts'
	
	EOF
}

read_config() { # this function needs to be written
:
}

TellUser() {
    Title="$1                                                     ";
    cat <<-EOF
	
	
	=======================================================
	=======================================================
	==     ${Title:0:40}      ==
	=======================================================
	=======================================================
	      RepoDir:	"${RepoDir}"
	CurrentBranch:	"${CurrentBranch}"
	      Version:	"${Version}"
	   ConfigFile:	"${RepoDir}/${ConfigFile}"
	   dojo_built:	"${dojo_built}"
	      tempdir:	"${tempdir}"
	  cookie_name:	"${cookie_name}"
	   default_db:	"${default_db}"
	         port:	"${port}"
	      pidFile:	"${pidFile}"
	      LogFile:	"${LogFile}"
	    otherOpts:	"${otherOpts}"
	:	"${_}"
	EOF
}

AskUser() {
    Title="$1                                                     ";
    cat <<-EOF
	
	
	=======================================================
	=======================================================
	==     ${Title:0:40}      ==
	=======================================================
	=======================================================
	
	EOF

    read -e -i"$ConfigFile"  -p 'Enter :            Config File Name: '   ConfigFile
    read -sn1                -p '              Use Built Dojo? [Y/n]: '   dojo_built_; echo "${dojo_built_:=Y}"
    read -e -i"$tempdir"     -p 'Enter :                     tempdir: '      tempdir
    read -e -i"$cookie_name" -p 'Enter :                 cookie_name: '  cookie_name
    read -e -i"$default_db"  -p 'Enter :        default Company Name: '   default_db
    read -e -i"$port"        -p 'Enter :    Starman http Listen Port: '         port
    read -e -i"$pidFile"     -p 'Enter :                pidFile Name: '      pidFile
    read -e -i"$LogFile"     -p 'Enter :                LogFile Name: '      LogFile
    read -e -i"$otherOpts"   -p 'Enter : other Starman/Plack Options: '    otherOpts

    if [[ 'yY' =~ ${dojo_built_} ]]; then
        dojo_built=1;
        if [[ ! -r "${RepoDir}/UI/js/lsmb/main.js" ]] || [[ ! -r "${RepoDir}/UI/js/dojo/dojo.js" ]]; then
            dojo_built_='n';
            dojo_built='0';
            cat <<-EOF
		*************************************************************
		*************************************************************
		** .... no built dojo found, falling back to dojo src .... **
		**      Alternatively run                                  **
		**        make submodules && make dojo                     **
		**      to install the src and build dojo                  **
		**                                                         **
		**      Then re-run this configure script                  **
		**                                                         **
		*************************************************************
		*************************************************************
		EOF
        fi
    else
        dojo_built=0;
    fi
    if [[ 'yY' =~ ${dojo_built_} ]] || [[ ! '1' == ${dojo_built:=0} ]]; then
        if [[ ! -r "${RepoDir}/UI/js-src/dojo/dojo.js" ]]; then
            dojo_built_='n';
            dojo_built='0';
            cat <<-EOF
		**************************************************************
		**************************************************************
		**              .... no dojo Source found ....              **
		** run "make submodules"                                    **
		**************************************************************
		**************************************************************
		EOF
        fi
    fi
}


Init
AskUser "Please Answer the following Questions."


TellUser "Current Settings are"

write_config | tee "${RepoDir}/${ConfigFile}"
