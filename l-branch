#!/bin/bash

if_MasterDir_CopyToNewDir() {
    CurrentDirPath="`readlink -f .`"
    if [[ "$CurrentDirPath" =~ /master$ ]]; then
        shopt -qs nocasematch
        local NewDir_ NewDir_stripped branchType_ issueNum_ issueNum_stripped K
        while [[ -z $branchType_ ]]; do
            read -rn1 -p 'Select Branch type { Enhancement | Feature | Issue | Other } [efIo]: ' branchType_
            case $branchType_ in
                'e') branchType_='enhancement-';;
                'f') branchType_='feature-';;
                'i') branchType_='issue-';;
                'o') branchType_='other-';;
                  *) branchType_='';;
            esac
            echo
        done
        if [[ "$branchType_" == 'issue-' ]]; then
            while [[ -z $issueNum_ ]]; do
                read -eri "$issueNum_stripped" -p 'Enter one or more Issue Numbers separated by _ chars: ' issueNum_
                issueNum_stripped="${issueNum_//[\]\-a-zA-Z\!@#\$%\^&\*()[\{;:<>,.?\/~]/_}"
                issueNum_="${issueNum_stripped//__/_}"
                for i in {1..30}; do issueNum_="${issueNum_//__/_}"; done # crude hack to collapse sequences of _'s
                if [[ -n "${issueNum_//_}" ]]; then
                    read -n1 -p "is this '$issueNum_' correct? [y/N] " K
                    if ! [[ 'Yy' =~ ${K:=n} ]]; then issueNum_=''; fi
                    echo ""
                fi
            done
            issueNum_+='-'
        fi
        while [[ -z $NewDir_ ]]; do
            read -eri "$NewDir_stripped" -p 'Enter New Branch Name: ' NewDir_
                NewDir_stripped="${NewDir_//[\]\!@#\$%\^&\*()[\{;:<>,.?\/~]/-}"
                NewDir_="${NewDir_stripped//--/-}"
                for i in {1..30}; do NewDir_="${NewDir_//--/-}"; done # crude hack to collapse sequences of -'s
                if [[ -n "${NewDir_//-}" ]]; then
                    read -n1 -p "is this '$NewDir_' correct? [y/N] " K
                    if ! [[ 'Yy' =~ ${K:=n} ]]; then echo "Stomping on NewDir_"; NewDir_=''; fi
                    echo ""
                fi
        done
        shopt -qu nocasematch
        NewDir="${CurrentDirPath%/*}/${branchType_}${issueNum_}${NewDir_}"
        cp "$CurrentDirPath" "$NewDir"
        cd "$NewDir"
    else
        echo "Not in master dir: Skip Copy"
    fi
}

if_MasterDir_CopyToNewDir

DirName=`git rev-parse --show-toplevel`
DirName="${DirName%/LedgerSMB}"
DirName="${DirName##*/}"
CurrentBranch=`git rev-parse --abbrev-ref HEAD`
COLUMNS=`tput cols`
(( NumCols=(4* ((COLUMNS-5)/80) ) ))
(( ColWidth = (COLUMNS-5)/ NumCols ))
echo
echo "====================================================="
echo "====================================================="
echo "==               Available Branches                =="
#printf "==  %-*s%-*s%-*s" $ColWidth "master" "1.4" "1.5";
#echo
echo "=="
i=''; NL='';
while read tag; do
    if (( i++ % NumCols == 0 )); then printf "$NL==  "; fi
    printf "%-*s" $ColWidth "$tag"
    NL='\n'
done < <( printf "master\n1.4\n1.5\n" )
echo
echo "=="
i=''; NL='';
while read tag; do
    if (( i++ % NumCols == 0 )); then printf "$NL==  "; fi
    printf "%-*s" $ColWidth "$tag"
    NL='\n'
done < <( git tag -l 1.4* --sort=version:refname; echo )
echo
echo "=="
i=''; NL='';
while read tag; do
    if (( i++ % NumCols == 0 )); then printf "$NL==  "; fi
    printf "%-*s" $ColWidth "$tag"
    NL='\n'
done < <( git tag -l 1.5* --sort=version:refname; echo )
echo
echo "=="
echo "====================================================="
echo "====================================================="
echo

    read -e -i"$CurrentBranch" -p 'Enter existing branch name: ' oldBranch

    DirName="${DirName#$oldBranch-}"

    read -e -i"$oldBranch-$DirName" -p 'Enter new branch name: ' newBranch

    if [[ $oldBranch =~ '/' ]]; then
        git checkout -b "$newBranch" "$oldBranch"
        git branch --set-upstream-to origin
    else
        git checkout -b "$newBranch" origin/"$oldBranch"
    fi

echo
echo "====================================================="
echo "====================================================="
echo

